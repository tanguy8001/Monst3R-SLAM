Starting evaluation of TUM dataset at: Mon Mar 31 10:39:40 CEST 2025
datasets/tum/rgbd_dataset_freiburg1_360/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 5 :  {3}
Database retrieval 6 :  {2, 3}
Database retrieval 8 :  {6}
Database retrieval 15 :  {13}
Database retrieval 16 :  {12}
Database retrieval 19 :  {16, 17}
Database retrieval 20 :  {16, 17}
Database retrieval 21 :  {1}
Database retrieval 22 :  {20}
Database retrieval 23 :  {19}
Database retrieval 24 :  {19}
Database retrieval 25 :  {23}
Database retrieval 28 :  {14}
Database retrieval 29 :  {26, 27}
Database retrieval 30 :  {26}
Database retrieval 32 :  {30}
Database retrieval 33 :  {29}
Database retrieval 35 :  {33, 1}
Database retrieval 36 :  {0, 33, 15}
Database retrieval 37 :  {32}
Database retrieval 38 :  {31}
Database retrieval 39 :  {37, 31}
Database retrieval 40 :  {0, 2, 37}
Database retrieval 41 :  {0, 1, 21}
Database retrieval 42 :  {2, 3, 6}
Database retrieval 43 :  {3, 5, 6}
Database retrieval 44 :  {4, 5}
Database retrieval 45 :  {43, 5}
Database retrieval 46 :  {8, 6}
Database retrieval 47 :  {8, 7}
Database retrieval 48 :  {8, 13}
Database retrieval 49 :  {9, 12}
FPS: 1.8645275734483489
FPS: 1.9016432493372557
FPS: 1.8614942987769396
FPS: 1.9128573010559196
FPS: 1.9042921468216336
FPS: 1.9060497378394525
FPS: 1.9194471514216578
FPS: 1.8996309179118758
FPS: 1.9148400730946575
FPS: 1.8945200495592325
FPS: 1.8747252205293141
FPS: 1.880920787246667
FPS: 1.8826394530770245
FPS: 1.883021375135761
FPS: 1.8692623509681061
FPS: 1.8619920427491754
FPS: 1.8596286515270293
FPS: 1.8405786059492246
FPS: 1.8413490802769525
FPS: 1.8285800715225693
FPS: 1.8162330378215787
FPS: 1.8193554394213074
FPS: 1.812156332428662
FPS: 1.8150142161842062
FPS: 1.8085054003320518
done
datasets/tum/rgbd_dataset_freiburg1_desk/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 6 :  {3, 4}
Database retrieval 7 :  {3}
Database retrieval 8 :  {1}
Database retrieval 9 :  {1, 2}
Database retrieval 10 :  {0, 2}
FPS: 2.0727935322590985
FPS: 2.034594657174951
FPS: 2.0214221048414647
FPS: 2.049752606870685
FPS: 2.066090369832073
FPS: 2.0554208700092365
FPS: 2.072661164263152
FPS: 2.0662526084840955
FPS: 2.069642548866098
FPS: 2.0789657069473937
FPS: 2.092042730828965
FPS: 2.0735130441349052
FPS: 2.0681360642754973
FPS: 2.0617228513636148
FPS: 2.0677226820290318
FPS: 2.074156552259888
FPS: 2.0496874166261527
FPS: 2.053667075278796
FPS: 2.0604499532514002
FPS: 2.0636030321731966
done
datasets/tum/rgbd_dataset_freiburg1_desk2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 10 :  {2}
Database retrieval 13 :  {10, 11}
Database retrieval 14 :  {10, 11}
Database retrieval 15 :  {8}
Database retrieval 16 :  {8, 7}
Database retrieval 18 :  {6, 7}
Database retrieval 19 :  {3, 4, 5}
Database retrieval 20 :  {3, 4}
Database retrieval 21 :  {3, 19}
Database retrieval 22 :  {19, 5, 6}
Database retrieval 23 :  {19}
Database retrieval 24 :  {18, 6, 7}
FPS: 1.88173724369731
FPS: 1.86994469684961
FPS: 1.9059967964144935
FPS: 1.9324431472666779
FPS: 1.9529559165333552
FPS: 1.9700969044571315
FPS: 1.997195417456907
FPS: 1.98520602543351
FPS: 1.9983225316075333
FPS: 1.9890163042180347
FPS: 1.982035708407325
FPS: 1.9772752915072789
FPS: 1.9617559597615193
FPS: 1.9343440143776915
FPS: 1.9147263977750344
FPS: 1.9078031711934413
FPS: 1.9209785039429623
FPS: 1.9333982257567288
FPS: 1.931807641761745
FPS: 1.9283295799222864
FPS: 1.9405253287895707
done
datasets/tum/rgbd_dataset_freiburg1_floor/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 3 :  {0, 1}
Database retrieval 9 :  {1, 2}
Database retrieval 10 :  {2, 1}
Database retrieval 13 :  {11}
Database retrieval 14 :  {11, 12}
Database retrieval 15 :  {11, 13}
Database retrieval 17 :  {14, 15}
Database retrieval 18 :  {14, 15}
Database retrieval 19 :  {13, 14}
Database retrieval 20 :  {18, 7}
Database retrieval 21 :  {18, 19}
Database retrieval 22 :  {17, 18, 19}
Database retrieval 23 :  {18, 20, 21}
Database retrieval 24 :  {20, 13}
Database retrieval 25 :  {0, 23}
Database retrieval 26 :  {0, 1}
Database retrieval 27 :  {0, 1}
Database retrieval 28 :  {1, 2, 3}
Database retrieval 29 :  {25, 26, 1}
Database retrieval 30 :  {25, 26}
FPS: 2.0046682027878098
FPS: 2.032883194033224
FPS: 2.037098769642344
FPS: 2.08425600466275
FPS: 2.1022887955116167
FPS: 2.051061308038954
FPS: 2.057100930581881
FPS: 2.0556557367317354
FPS: 2.069787288596316
FPS: 2.080946111916919
FPS: 2.080624646390323
FPS: 2.079762622325352
FPS: 2.088533156506812
FPS: 2.0940797904970747
FPS: 2.083940297818102
FPS: 2.076000440289066
FPS: 2.077695146772034
FPS: 2.0842453224200543
FPS: 2.086233173468302
FPS: 2.0901086022410515
FPS: 2.085018775999861
FPS: 2.087306134269751
FPS: 2.080994041839899
FPS: 2.073906505160098
FPS: 2.0621463440583883
FPS: 2.0529476328394995
FPS: 2.056794445279789
FPS: 2.060889221341794
FPS: 2.047922216747432
FPS: 2.052788195288042
FPS: 2.0570143352594665
FPS: 2.0417626709252934
FPS: 2.0459400145313857
FPS: 2.033653292341699
FPS: 2.0311962255221783
FPS: 2.0285581678821605
FPS: 2.033601211894341
FPS: 2.0215923139753356
FPS: 2.025895548164366
FPS: 2.028941626073277
FPS: 2.0151543339053304
done
datasets/tum/rgbd_dataset_freiburg1_plant/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 5 :  {1}
Database retrieval 6 :  {2, 3, 4}
Database retrieval 9 :  {1, 5}
Database retrieval 11 :  {9, 5}
Database retrieval 12 :  {8}
Database retrieval 16 :  {9, 11, 1}
Database retrieval 17 :  {12, 13, 14}
Database retrieval 21 :  {16, 17, 12}
Database retrieval 22 :  {16, 1}
Database retrieval 24 :  {16, 22}
Database retrieval 25 :  {21, 22}
Database retrieval 26 :  {20}
Database retrieval 28 :  {25, 21, 1}
Database retrieval 30 :  {25, 28}
Database retrieval 31 :  {27, 28}
Database retrieval 32 :  {2, 4}
Database retrieval 33 :  {3, 4}
Database retrieval 34 :  {0, 1}
Database retrieval 35 :  {0, 5}
Database retrieval 36 :  {1, 5}
Database retrieval 37 :  {5, 6}
Database retrieval 38 :  {12, 6, 7}
Database retrieval 39 :  {8, 7}
Database retrieval 40 :  {9, 10, 11}
FPS: 1.9120199947968015
FPS: 1.9467503658111547
FPS: 1.979672524349332
FPS: 1.9629577546673234
FPS: 1.997604191750007
FPS: 1.967448462877205
FPS: 1.9806827961304858
FPS: 1.9884297641335709
FPS: 1.9754049470659394
FPS: 1.9931110895597988
FPS: 1.9765855183381689
FPS: 1.977640985344024
FPS: 1.9869010151456667
FPS: 1.9988660002419438
FPS: 1.9960781878807
FPS: 2.00515603233955
FPS: 1.995041446403646
FPS: 1.9873180383250666
FPS: 1.9841746579490502
FPS: 1.991880662151923
FPS: 1.993632403286646
FPS: 1.9748434576087506
FPS: 1.9819957897370115
FPS: 1.9737547409959069
FPS: 1.9707009031728238
FPS: 1.970914230946573
FPS: 1.9725816897510569
FPS: 1.9642441540579745
FPS: 1.9525130253116545
FPS: 1.9514365936014364
FPS: 1.9503544015776892
FPS: 1.9483869134465324
FPS: 1.9384595027388867
FPS: 1.9366904421825772
FPS: 1.9324147885986642
FPS: 1.9386161351103235
FPS: 1.9373600397065813
FPS: 1.9334614018830103
done
datasets/tum/rgbd_dataset_freiburg1_room/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 3 :  {1}
Database retrieval 4 :  {0, 1}
Database retrieval 5 :  {0}
Database retrieval 9 :  {7}
Database retrieval 14 :  {7}
Database retrieval 17 :  {15}
Database retrieval 25 :  {23}
Database retrieval 30 :  {28}
Database retrieval 38 :  {1, 2, 3}
Database retrieval 39 :  {0, 1, 4}
Database retrieval 40 :  {8, 9}
Database retrieval 41 :  {4, 39}
Database retrieval 42 :  {0, 4, 5}
Database retrieval 43 :  {10, 6, 7}
Database retrieval 45 :  {10, 43, 7}
Database retrieval 46 :  {9, 7}
Database retrieval 47 :  {8, 9}
Database retrieval 48 :  {10, 45, 46}
Database retrieval 49 :  {10}
Database retrieval 50 :  {48, 10, 12}
FPS: 1.8697662931813457
FPS: 1.8665635794599729
FPS: 1.9050246928232808
FPS: 1.8740426680112765
FPS: 1.9068818250589739
FPS: 1.9338679245804984
FPS: 1.9430868461350446
FPS: 1.9369588824763568
FPS: 1.9484767741198492
FPS: 1.9560186283233512
FPS: 1.9501772518980163
FPS: 1.9613338810201701
FPS: 1.9700251221117855
FPS: 1.9706274978714693
FPS: 1.9813801577237506
FPS: 1.9865827523380826
FPS: 1.9869230197080667
FPS: 1.9916376363743584
FPS: 1.984026083724224
FPS: 1.9880416208769474
FPS: 1.9828885806076564
FPS: 1.991056066073551
FPS: 1.9990582811261925
FPS: 2.007069110178876
FPS: 2.005214826545913
FPS: 2.008431078863963
FPS: 2.0049750943185143
FPS: 2.007314524927991
FPS: 2.001199252706356
FPS: 2.003182698500464
FPS: 2.004534858303717
FPS: 2.005912367620956
FPS: 2.01089386959143
FPS: 2.0055147724520563
FPS: 1.992314392115948
FPS: 1.9801608819185261
FPS: 1.9825353354739745
FPS: 1.9753402945846492
FPS: 1.9763749609259702
FPS: 1.9625807377104898
FPS: 1.9523609788931202
FPS: 1.952378876177227
FPS: 1.9492301076969731
FPS: 1.9536010810260347
FPS: 1.9578355456796908
done
datasets/tum/rgbd_dataset_freiburg1_rpy/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 4 :  {2}
Database retrieval 5 :  {0, 1, 2}
Database retrieval 6 :  {0, 1}
Database retrieval 7 :  {1, 5}
Database retrieval 8 :  {1}
Database retrieval 9 :  {5, 7}
Database retrieval 10 :  {8, 1}
Database retrieval 11 :  {9, 5, 7}
Database retrieval 12 :  {8, 9, 10}
Database retrieval 13 :  {8, 10}
Database retrieval 14 :  {8, 10, 12}
Database retrieval 15 :  {9, 11, 7}
Database retrieval 18 :  {8, 12, 14}
Database retrieval 19 :  {1}
Database retrieval 20 :  {17}
Database retrieval 21 :  {10, 18, 19}
FPS: 1.8192486411528719
FPS: 1.8956334051056727
FPS: 1.836996593461645
FPS: 1.7995787686234304
FPS: 1.835790478919695
FPS: 1.8845637778093203
FPS: 1.889713132241557
FPS: 1.8807557853463523
FPS: 1.9108601201682556
FPS: 1.9043693457841224
FPS: 1.8797550783402672
FPS: 1.8751530381022348
FPS: 1.877136884216513
FPS: 1.8953303921425573
FPS: 1.911696383870419
FPS: 1.920572320206542
FPS: 1.9311063662452095
FPS: 1.9371069337305586
FPS: 1.9290674866109263
FPS: 1.9414130548846262
FPS: 1.941451724263582
FPS: 1.9415326143538645
FPS: 1.9349133710455708
FPS: 1.9416536382274314
done
datasets/tum/rgbd_dataset_freiburg1_teddy/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
slurmstepd: error: *** JOB 12297 ON studgpu-node01 CANCELLED AT 2025-03-31T11:40:00 DUE TO TIME LIMIT ***
