Starting evaluation of Bonn dataset at: Fri Mar 21 20:32:17 CET 2025
datasets/bonn/rgbd_bonn_static/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 2, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Process Process-2:
Traceback (most recent call last):
  File "/home/tdieudonne/miniconda3/envs/slam/lib/python3.11/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/tdieudonne/miniconda3/envs/slam/lib/python3.11/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/work/courses/3dv/24/MASt3R-SLAM/main.py", line 136, in run_backend
    factor_graph.solve_GN_calib()
  File "/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/global_opt.py", line 174, in solve_GN_calib
    ii, jj, idx_ii2jj, valid_match, Q_ii2jj = self.prep_two_way_edges()
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/global_opt.py", line 107, in prep_two_way_edges
    idx_ii2jj = torch.cat((self.idx_ii2jj, self.idx_jj2ii), dim=0)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 508.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 425.25 MiB is free. Process 553750 has 7.79 GiB memory in use. Including non-PyTorch memory, this process has 2.69 GiB memory in use. Of the allocated memory 1.32 GiB is allocated by PyTorch, and 1.21 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 9 :  {7}
Database retrieval 13 :  {11}
Database retrieval 16 :  {14}
Database retrieval 17 :  {15}
Database retrieval 23 :  {21}
Database retrieval 24 :  {22}
Database retrieval 25 :  {19, 21}
Database retrieval 26 :  {24, 21, 23}
Database retrieval 27 :  {24}
Database retrieval 30 :  {24, 26, 27}
Database retrieval 32 :  {26, 27, 30}
Database retrieval 33 :  {24, 26, 30}
Database retrieval 34 :  {31}
Database retrieval 35 :  {33, 28}
Database retrieval 36 :  {34}
Database retrieval 37 :  {35}
Database retrieval 38 :  {29}
Database retrieval 39 :  {25}
Database retrieval 41 :  {38}
Database retrieval 42 :  {40}
Database retrieval 43 :  {40, 41}
Database retrieval 44 :  {40, 42}
Database retrieval 45 :  {40, 39}
Database retrieval 47 :  {45}
Database retrieval 53 :  {51}
Database retrieval 54 :  {51}
Database retrieval 55 :  {0}
Database retrieval 56 :  {0}
Database retrieval 57 :  {1}
Database retrieval 58 :  {1, 2}
Database retrieval 59 :  {2, 7}
Database retrieval 60 :  {2, 3}
Database retrieval 61 :  {3, 4}
Database retrieval 62 :  {57, 5}
Database retrieval 63 :  {5, 6}
Database retrieval 64 :  {62}
Database retrieval 66 :  {64}
Database retrieval 68 :  {6}
Database retrieval 69 :  {59, 7}
Database retrieval 70 :  {68, 7}
Database retrieval 72 :  {70, 7}
Database retrieval 73 :  {70}
Database retrieval 74 :  {8, 70, 7}
Database retrieval 75 :  {8}
Database retrieval 76 :  {9, 74, 7}
Database retrieval 77 :  {9, 7}
Database retrieval 78 :  {74, 76}
Database retrieval 79 :  {10, 11}
Database retrieval 80 :  {10, 11}
Database retrieval 81 :  {11, 12}
Database retrieval 82 :  {80, 11, 13}
Database retrieval 83 :  {16, 13, 14}
Database retrieval 84 :  {16, 14, 15}
slurmstepd: error: *** JOB 10181 ON studgpu-node01 CANCELLED AT 2025-03-21T21:32:21 DUE TO TIME LIMIT ***
