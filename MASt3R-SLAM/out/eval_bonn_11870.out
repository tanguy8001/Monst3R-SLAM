Starting evaluation of Bonn dataset at: Fri Mar 28 11:44:10 CET 2025
datasets/bonn/rgbd_bonn_removing_nonobstructing_box2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
FPS: 1.8786163486988345
FPS: 2.060850901365296
FPS: 2.1308073323563654
FPS: 2.1720442673416285
FPS: 2.1989963384069426
FPS: 2.2132255937734175
FPS: 2.225985787521793
FPS: 2.2105361414854743
FPS: 2.219743931526998
FPS: 2.2261671145749884
FPS: 2.2321711922863283
FPS: 2.2364711566786943
FPS: 2.2412716120766993
FPS: 2.2433504633372747
FPS: 2.2448217284439913
FPS: 2.2465337850701657
FPS: 2.2489930454877913
FPS: 2.250530538607044
FPS: 2.2520843057576516
FPS: 2.2526191822142474
FPS: 2.254247035493162
FPS: 2.255642404969346
FPS: 2.2563234728319124
FPS: 2.257891628001358
FPS: 2.2592057534642094
FPS: 2.25865071836397
FPS: 2.2585063086727195
FPS: 2.257510930931187
FPS: 2.258137412880408
FPS: 2.259404603106195
done
datasets/bonn/rgbd_bonn_removing_nonobstructing_box2/
âœ… Transformed: logs/bonn/calib/rgbd_bonn_removing_nonobstructing_box2/rgbd_bonn_removing_nonobstructing_box2.txt -> logs/bonn_transformed/calib/rgbd_bonn_removing_nonobstructing_box2/rgbd_bonn_removing_nonobstructing_box2.txt
ðŸŽ‰ All the estimated trajectories have been transformed and saved.
datasets/bonn/rgbd_bonn_removing_nonobstructing_box2/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.051880
      mean	0.014272
    median	0.012468
       min	0.000630
      rmse	0.016653
       sse	0.151688
       std	0.008579

