Starting evaluation of Bonn dataset at: Mon Mar 31 08:57:18 CEST 2025
datasets/bonn/rgbd_bonn_person_tracking2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 4 :  {2}
Database retrieval 5 :  {1, 2}
Database retrieval 6 :  {2, 4}
Database retrieval 7 :  {5}
Database retrieval 8 :  {4}
Database retrieval 10 :  {2, 3}
FPS: 1.850040270966706
FPS: 1.9631629698849116
FPS: 2.051407593688096
FPS: 2.0729003271862863
FPS: 2.085099644481976
FPS: 2.0759857452711437
FPS: 2.0968493098171312
FPS: 2.077936996247083
FPS: 2.095782782416376
FPS: 2.0816787741185734
FPS: 2.0950889246689752
FPS: 2.09089383858036
FPS: 2.088665375014881
FPS: 2.097975682736173
FPS: 2.0985447668542987
FPS: 2.1072979393403797
FPS: 2.099170008275318
FPS: 2.107188952663824
done
datasets/bonn/rgbd_bonn_crowd3/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 3 :  {0, 1}
Database retrieval 4 :  {1, 2}
Database retrieval 5 :  {1, 2}
Database retrieval 6 :  {0, 4}
Database retrieval 7 :  {0, 5}
Database retrieval 8 :  {1, 2}
Database retrieval 10 :  {8, 7}
Database retrieval 11 :  {8, 7}
Database retrieval 12 :  {10, 6}
Database retrieval 13 :  {11, 6}
Database retrieval 14 :  {11, 12}
Database retrieval 15 :  {12, 13}
Database retrieval 16 :  {13, 14}
Database retrieval 17 :  {14, 15}
Database retrieval 18 :  {16, 14}
Database retrieval 19 :  {16, 17}
Database retrieval 20 :  {16, 18}
Database retrieval 21 :  {18, 19}
Database retrieval 22 :  {0, 1, 6}
Database retrieval 23 :  {0, 6}
Database retrieval 24 :  {10, 7}
Database retrieval 25 :  {8, 22}
Database retrieval 26 :  {24, 8}
Database retrieval 27 :  {16, 25}
Database retrieval 28 :  {25, 26}
Database retrieval 29 :  {1, 22, 23}
Database retrieval 30 :  {3, 4, 5}
Database retrieval 31 :  {2, 3, 6}
Database retrieval 32 :  {18, 21}
Database retrieval 33 :  {18, 5}
Database retrieval 34 :  {32, 18}
Database retrieval 35 :  {32, 33}
Database retrieval 36 :  {33, 34}
Database retrieval 37 :  {34, 35}
Database retrieval 38 :  {35, 36}
Database retrieval 39 :  {16, 18}
Database retrieval 40 :  {24, 6, 7}
Database retrieval 41 :  {18, 29, 39}
FPS: 2.085397967167754
FPS: 2.154001576353988
FPS: 2.176342313868116
FPS: 2.133350893518385
FPS: 2.0561462748408488
FPS: 2.0328916128406482
FPS: 1.9805702810046633
FPS: 1.9451811409852586
FPS: 1.9719236588237814
FPS: 1.8429978317769065
FPS: 1.7307564070483639
FPS: 1.7443060147516278
FPS: 1.7564002235525855
FPS: 1.7515420199094216
FPS: 1.7481585066630174
FPS: 1.772148421246277
FPS: 1.77883181950037
FPS: 1.7986911403533727
FPS: 1.8015147057596266
FPS: 1.8177332224970104
FPS: 1.7333132205854733
FPS: 1.7495458831561277
FPS: 1.7527376103771184
FPS: 1.767530269610917
FPS: 1.7704768620280547
FPS: 1.7838689703128523
FPS: 1.7966263776337943
FPS: 1.809028863436468
done
datasets/bonn/rgbd_bonn_placing_nonobstructing_box3/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
FPS: 2.0712436758766573
FPS: 2.135215834320211
FPS: 2.1699961922908417
FPS: 2.182812113978978
FPS: 2.1936059886856
FPS: 2.1751667418372804
FPS: 2.18219416407121
FPS: 2.1908032906398507
FPS: 2.2015409977178617
FPS: 2.2058571475798803
FPS: 2.208127686480681
FPS: 2.207745222278999
FPS: 2.2078611943016
FPS: 2.212223299474999
FPS: 2.2143609210258623
FPS: 2.2158680469701935
FPS: 2.2174407680220054
FPS: 2.217363211400892
FPS: 2.2187971550303116
FPS: 2.218728952107309
FPS: 2.218989716122551
FPS: 2.2191769071836167
done
datasets/bonn/rgbd_bonn_balloon2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 3 :  {0, 1}
Database retrieval 4 :  {0, 2}
Database retrieval 5 :  {0, 2, 3}
Database retrieval 6 :  {0, 4}
FPS: 2.0394051883978346
FPS: 2.120677809974209
FPS: 2.1541457417926266
FPS: 2.1301000683421054
FPS: 2.1474187494549923
FPS: 2.122336511668197
FPS: 2.0950747732684905
FPS: 2.07375772738131
FPS: 2.0895217745948917
FPS: 2.0685530100565734
FPS: 2.0765679914677397
FPS: 2.0663747147274187
FPS: 2.08058691116679
FPS: 2.092169739361502
FPS: 2.10125637239856
done
datasets/bonn/rgbd_bonn_moving_obstructing_box2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 3 :  {1}
Database retrieval 4 :  {2}
Database retrieval 5 :  {2, 3}
Database retrieval 6 :  {3, 4}
Database retrieval 7 :  {5}
Database retrieval 9 :  {6}
Database retrieval 10 :  {8}
Database retrieval 11 :  {8, 9}
Database retrieval 12 :  {9, 10}
Database retrieval 13 :  {10, 11}
Database retrieval 14 :  {1, 12}
Database retrieval 15 :  {0, 1}
FPS: 2.1149482318972996
FPS: 2.183996036183494
FPS: 2.221171087680649
FPS: 2.1807506112736714
FPS: 2.192307751411519
FPS: 2.199372748185662
FPS: 2.202786517297685
FPS: 2.1567327486569305
FPS: 2.1119760498484217
FPS: 2.0972654480789714
FPS: 2.0931911906844456
FPS: 2.105500120823499
FPS: 2.1158049554754648
FPS: 2.0884363435249695
FPS: 2.079533134720747
FPS: 2.0711432326737835
FPS: 2.0802307585463375
FPS: 2.0892880147044237
FPS: 2.098006381812933
FPS: 2.091105914024662
FPS: 2.096486209224045
FPS: 2.090048616684651
FPS: 2.0962650398809735
FPS: 2.1034530250022083
FPS: 2.097665785476168
FPS: 2.1036955923382665
done
datasets/bonn/rgbd_bonn_balloon_tracking2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 4 :  {2}
Database retrieval 8 :  {0, 6}
Database retrieval 9 :  {1, 6}
Database retrieval 12 :  {0, 9, 10}
FPS: 2.084001499007604
FPS: 2.079791684175036
FPS: 2.094753914081638
FPS: 2.1255067291495915
FPS: 2.126151717218729
FPS: 2.142118579681861
FPS: 2.1080081163223867
FPS: 2.0950818365430504
FPS: 2.050687295604481
FPS: 2.0573485159794025
FPS: 2.0759853539846085
FPS: 2.077486921413882
FPS: 2.0884141661622153
FPS: 2.0749993098384025
FPS: 2.0853963681083023
done
datasets/bonn/rgbd_bonn_placing_obstructing_box/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 4 :  {2}
Database retrieval 5 :  {2, 3}
Database retrieval 6 :  {3, 4}
Database retrieval 7 :  {3, 5}
Database retrieval 8 :  {5, 6}
Database retrieval 9 :  {6, 7}
Database retrieval 10 :  {8, 7}
Database retrieval 11 :  {8, 7}
Database retrieval 12 :  {8, 10, 7}
FPS: 2.09117733209742
FPS: 2.1784217823688445
FPS: 2.2144156162134254
FPS: 2.2275509483814036
FPS: 2.2296912074213715
FPS: 2.2358681346484404
FPS: 2.2401659261896776
FPS: 2.220878036131929
FPS: 2.2224320285751253
FPS: 2.228096057850398
FPS: 2.230034620436843
FPS: 2.2362895369531346
FPS: 2.240681606580838
FPS: 2.2431036799995314
FPS: 2.244858196889931
FPS: 2.2377783057826997
FPS: 2.1804362353062725
FPS: 2.1450366745648775
FPS: 2.148477865977787
FPS: 2.1521393413088354
FPS: 2.1529461163371577
FPS: 2.1541339559388897
FPS: 2.154454802491849
FPS: 2.1442855480777325
FPS: 2.13625394086347
FPS: 2.1276273997514967
FPS: 2.131718963863454
FPS: 2.135416631026794
FPS: 2.126243060819551
FPS: 2.129551848917838
FPS: 2.1336659601394894
FPS: 2.137310154256626
FPS: 2.140767610056823
done
datasets/bonn/rgbd_bonn_kidnapping_box2/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 3 :  {0, 1}
Database retrieval 4 :  {0}
Database retrieval 5 :  {0, 1, 3}
Database retrieval 6 :  {1, 2}
Database retrieval 7 :  {1}
FPS: 2.0988585469035113
FPS: 2.1834798801064554
FPS: 2.158575241858013
FPS: 2.189069514820916
FPS: 2.1845054202085197
FPS: 2.1975611447328527
FPS: 2.2045238042856927
FPS: 2.215005219746562
FPS: 2.221037842599915
FPS: 2.2267909440488096
FPS: 2.2011390165018883
FPS: 2.204912128410929
FPS: 2.191496212579891
FPS: 2.1977791361491854
FPS: 2.20108019572159
FPS: 2.2034032057052904
FPS: 2.206835836712286
FPS: 2.2101522681575245
FPS: 2.213344966959094
FPS: 2.1976668978541203
FPS: 2.2009653996537177
FPS: 2.189637415818558
FPS: 2.1901964575894404
FPS: 2.1907126023963293
FPS: 2.1919476464796843
FPS: 2.1952927701538543
FPS: 2.1975384355987035
FPS: 2.1983136782586974
FPS: 2.199978445056018
FPS: 2.201433451293936
FPS: 2.203698182844016
FPS: 2.2058909195308467
FPS: 2.207268140603688
FPS: 2.2087261090535804
FPS: 2.2100917297534157
FPS: 2.211600840422399
FPS: 2.213358718564167
FPS: 2.2145819176265973
FPS: 2.2153358135599466
FPS: 2.2108989238560475
FPS: 2.2116246138697253
FPS: 2.21266061989003
FPS: 2.214002970584253
done
datasets/bonn/rgbd_bonn_person_tracking2/
✅ Transformed: logs/bonn/calib/rgbd_bonn_person_tracking2/rgbd_bonn_person_tracking2.txt -> logs/bonn_transformed/calib/rgbd_bonn_person_tracking2/rgbd_bonn_person_tracking2.txt
datasets/bonn/rgbd_bonn_crowd3/
✅ Transformed: logs/bonn/calib/rgbd_bonn_crowd3/rgbd_bonn_crowd3.txt -> logs/bonn_transformed/calib/rgbd_bonn_crowd3/rgbd_bonn_crowd3.txt
datasets/bonn/rgbd_bonn_placing_nonobstructing_box3/
✅ Transformed: logs/bonn/calib/rgbd_bonn_placing_nonobstructing_box3/rgbd_bonn_placing_nonobstructing_box3.txt -> logs/bonn_transformed/calib/rgbd_bonn_placing_nonobstructing_box3/rgbd_bonn_placing_nonobstructing_box3.txt
datasets/bonn/rgbd_bonn_balloon2/
✅ Transformed: logs/bonn/calib/rgbd_bonn_balloon2/rgbd_bonn_balloon2.txt -> logs/bonn_transformed/calib/rgbd_bonn_balloon2/rgbd_bonn_balloon2.txt
datasets/bonn/rgbd_bonn_moving_obstructing_box2/
✅ Transformed: logs/bonn/calib/rgbd_bonn_moving_obstructing_box2/rgbd_bonn_moving_obstructing_box2.txt -> logs/bonn_transformed/calib/rgbd_bonn_moving_obstructing_box2/rgbd_bonn_moving_obstructing_box2.txt
datasets/bonn/rgbd_bonn_balloon_tracking2/
✅ Transformed: logs/bonn/calib/rgbd_bonn_balloon_tracking2/rgbd_bonn_balloon_tracking2.txt -> logs/bonn_transformed/calib/rgbd_bonn_balloon_tracking2/rgbd_bonn_balloon_tracking2.txt
datasets/bonn/rgbd_bonn_placing_obstructing_box/
✅ Transformed: logs/bonn/calib/rgbd_bonn_placing_obstructing_box/rgbd_bonn_placing_obstructing_box.txt -> logs/bonn_transformed/calib/rgbd_bonn_placing_obstructing_box/rgbd_bonn_placing_obstructing_box.txt
datasets/bonn/rgbd_bonn_kidnapping_box2/
✅ Transformed: logs/bonn/calib/rgbd_bonn_kidnapping_box2/rgbd_bonn_kidnapping_box2.txt -> logs/bonn_transformed/calib/rgbd_bonn_kidnapping_box2/rgbd_bonn_kidnapping_box2.txt
🎉 All the estimated trajectories have been transformed and saved.
datasets/bonn/rgbd_bonn_person_tracking2/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.056741
      mean	0.023263
    median	0.022023
       min	0.002906
      rmse	0.025684
       sse	0.230218
       std	0.010885

datasets/bonn/rgbd_bonn_crowd3/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.041078
      mean	0.016160
    median	0.014986
       min	0.002528
      rmse	0.017622
       sse	0.145640
       std	0.007029

datasets/bonn/rgbd_bonn_placing_nonobstructing_box3/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.043258
      mean	0.016767
    median	0.015808
       min	0.002495
      rmse	0.018642
       sse	0.137278
       std	0.008148

datasets/bonn/rgbd_bonn_balloon2/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.041438
      mean	0.020922
    median	0.020403
       min	0.004610
      rmse	0.022467
       sse	0.136289
       std	0.008188

datasets/bonn/rgbd_bonn_moving_obstructing_box2/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.313396
      mean	0.176654
    median	0.168900
       min	0.046410
      rmse	0.191677
       sse	17.194426
       std	0.074389

datasets/bonn/rgbd_bonn_balloon_tracking2/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.064355
      mean	0.029978
    median	0.030062
       min	0.008235
      rmse	0.031403
       sse	0.226808
       std	0.009350

datasets/bonn/rgbd_bonn_placing_obstructing_box/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.337775
      mean	0.157453
    median	0.156682
       min	0.006514
      rmse	0.179591
       sse	19.964558
       std	0.086380

datasets/bonn/rgbd_bonn_kidnapping_box2/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.061928
      mean	0.018301
    median	0.015823
       min	0.001484
      rmse	0.021265
       sse	0.345927
       std	0.010829

