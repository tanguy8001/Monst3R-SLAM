Starting evaluation of Bonn dataset at: Sun Apr  6 16:53:30 CEST 2025
datasets/bonn/rgbd_bonn_person_tracking/
{'use_calib': True, 'single_thread': True, 'use_dynamic_mask': False, 'dynamic_mask_threshold': 0.35, 'dynamic_points_weight': 0.8, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:117: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
FPS: 2.0450099052761948
FPS: 2.0498504370897184
Database retrieval 2 :  {0}
FPS: 2.0354752455167304
FPS: 2.0722708227402955
Database retrieval 3 :  {1}
FPS: 2.0585086801110926
FPS: 2.0809137800676716
Database retrieval 4 :  {1, 2}
FPS: 2.0586502745966424
FPS: 2.060855023454929
Database retrieval 6 :  {4}
FPS: 2.0532349172888305
FPS: 2.0660963745414964
FPS: 2.0756365739652485
Database retrieval 7 :  {5}
FPS: 2.0674997944720004
Database retrieval 8 :  {4, 5}
FPS: 2.057550248590937
Database retrieval 9 :  {3, 4}
FPS: 2.049476389743433
Database retrieval 10 :  {2, 3}
FPS: 2.0408093910218192
FPS: 2.0501483324687646
Database retrieval 11 :  {1}
FPS: 2.0472559272950748
FPS: 2.05676018372774
FPS: 2.066336115053105
done
datasets/bonn/rgbd_bonn_person_tracking/
âœ… Transformed: logs/bonn/calib/rgbd_bonn_person_tracking/rgbd_bonn_person_tracking.txt -> logs/bonn_transformed/calib/rgbd_bonn_person_tracking/rgbd_bonn_person_tracking.txt
ðŸŽ‰ All the estimated trajectories have been transformed and saved.
datasets/bonn/rgbd_bonn_person_tracking/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.075039
      mean	0.032379
    median	0.029121
       min	0.009200
      rmse	0.034883
       sse	0.428332
       std	0.012979

