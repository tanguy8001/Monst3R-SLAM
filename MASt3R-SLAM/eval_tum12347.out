Starting evaluation of TUM dataset at: Mon Mar 31 13:21:14 CEST 2025
datasets/tum/rgbd_dataset_freiburg1_teddy/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 3 :  {0, 1}
Database retrieval 4 :  {0, 2}
Database retrieval 5 :  {2}
Database retrieval 6 :  {2, 3, 4}
Database retrieval 11 :  {8, 9}
Database retrieval 12 :  {8, 7}
Database retrieval 13 :  {8, 11}
Database retrieval 14 :  {10, 11}
Database retrieval 15 :  {9, 10}
Database retrieval 18 :  {16}
Database retrieval 22 :  {20}
Database retrieval 24 :  {22}
Database retrieval 25 :  {19}
Database retrieval 26 :  {24, 22}
Database retrieval 27 :  {24, 23}
Database retrieval 28 :  {23}
Database retrieval 29 :  {27}
Database retrieval 30 :  {28}
Database retrieval 32 :  {4}
Database retrieval 33 :  {0, 4}
RELOCALIZING against kf  34  and  [32, 33]
Failed to relocalize
RELOCALIZING against kf  34  and  [33, 32]
Failed to relocalize
RELOCALIZING against kf  34  and  [32, 33]
Failed to relocalize
RELOCALIZING against kf  34  and  [32, 33, 0]
Failed to relocalize
RELOCALIZING against kf  34  and  [32, 33, 4]
Success! Relocalized
Database retrieval 35 :  {32, 33}
Database retrieval 36 :  {29, 30, 31}
Database retrieval 38 :  {0, 36}
Database retrieval 39 :  {32, 2, 4}
Database retrieval 40 :  {0, 3, 4}
Database retrieval 41 :  {32, 4}
Database retrieval 42 :  {40, 3}
Database retrieval 43 :  {1, 2}
Database retrieval 44 :  {3, 2}
FPS: 2.0283412335705506
FPS: 2.1005255490580645
FPS: 2.073188053838811
FPS: 1.9915242584838035
FPS: 1.9499402531214642
FPS: 1.9373666521053932
FPS: 1.9698506238681837
FPS: 1.997680452603129
FPS: 2.0045179506486592
FPS: 2.0118686434277464
FPS: 2.01429764178718
FPS: 2.0164093516206116
FPS: 2.0098162022091697
FPS: 2.0029365609824
FPS: 1.9982072278459537
FPS: 1.9935672685081731
FPS: 2.0031864063603226
FPS: 1.9978646619103257
FPS: 2.000247981046415
FPS: 2.009206450171372
FPS: 1.998806396148649
FPS: 1.995132363636651
FPS: 1.9939335269989553
FPS: 1.999973529265336
FPS: 2.0031006757117926
FPS: 1.996153166693561
FPS: 1.9828466552669155
FPS: 1.9822707472043721
FPS: 1.9874494613802565
FPS: 1.9875234767091992
FPS: 1.9932422996102799
FPS: 1.9988670899127157
FPS: 1.9984755921480521
FPS: 2.000679134449822
FPS: 1.9982058956997577
FPS: 1.9916035692888874
Skipped frame 1084
FPS: 1.9642443771317863
FPS: 1.9611011528451119
FPS: 1.9632489753136457
FPS: 1.9615387305820497
FPS: 1.9577390379072048
FPS: 1.9621852258421388
FPS: 1.9662639914382338
FPS: 1.9704215552030415
FPS: 1.9526288194063648
FPS: 1.95097595042424
FPS: 1.948664748162989
done
datasets/tum/rgbd_dataset_freiburg1_xyz/
{'use_calib': True, 'single_thread': True, 'dataset': {'subsample': 1, 'img_downsample': 1, 'center_principle_point': True}, 'matching': {'max_iter': 10, 'lambda_init': 1e-08, 'convergence_thresh': 1e-06, 'dist_thresh': 0.1, 'radius': 3, 'dilation_max': 5}, 'tracking': {'min_match_frac': 0.05, 'max_iters': 50, 'C_conf': 0.0, 'Q_conf': 1.5, 'rel_error': 0.001, 'delta_norm': 0.001, 'huber': 1.345, 'match_frac_thresh': 0.333, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'pixel_border': -10, 'depth_eps': 1e-06, 'filtering_mode': 'weighted_pointmap', 'filtering_score': 'median'}, 'local_opt': {'pin': 1, 'window_size': 1000000.0, 'C_conf': 0.0, 'Q_conf': 1.5, 'min_match_frac': 0.1, 'pixel_border': -10, 'depth_eps': 1e-06, 'max_iters': 10, 'sigma_ray': 0.003, 'sigma_dist': 10.0, 'sigma_pixel': 1.0, 'sigma_depth': 10.0, 'sigma_point': 0.05, 'delta_norm': 1e-08, 'use_cuda': True}, 'retrieval': {'k': 3, 'min_thresh': 0.005}, 'reloc': {'min_match_frac': 0.3, 'strict': True}, 'inherit': 'config/base.yaml'}
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/model.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(model_path, map_location='cpu')
... loading model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric.pth
instantiating : AsymmetricMASt3R(enc_depth=24, dec_depth=12, enc_embed_dim=1024, dec_embed_dim=768, enc_num_heads=16, dec_num_heads=12, pos_embed='RoPE100',img_size=(512, 512), head_type='catmlp+dpt', output_mode='pts3d+desc24', depth_mode=('exp', -inf, inf), conf_mode=('exp', 1, inf), patch_embed_cls='PatchEmbedDust3R', two_confs=True, desc_conf_mode=('exp', 0, inf), landscape_only=False)
<All keys matched successfully>
/work/courses/3dv/24/MASt3R-SLAM/thirdparty/mast3r/mast3r/retrieval/processor.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(modelname, 'cpu')  # TODO from pretrained to download it automatically
/work/courses/3dv/24/MASt3R-SLAM/mast3r_slam/frame.py:116: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1729647429097/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  uimg = torch.from_numpy(img["unnormalized_img"]) / 255.0
Loading retrieval model from checkpoints/MASt3R_ViTLarge_BaseDecoder_512_catmlpdpt_metric_retrieval_trainingfree.pth
Database retrieval 2 :  {0}
Database retrieval 4 :  {0, 1, 2}
Database retrieval 5 :  {0, 1}
Database retrieval 6 :  {0, 2, 4}
Database retrieval 7 :  {0, 3}
Database retrieval 8 :  {2, 4, 6}
Database retrieval 9 :  {0, 2, 6}
Database retrieval 10 :  {8, 3, 4}
Database retrieval 11 :  {0, 9, 2}
Database retrieval 12 :  {8, 10, 4}
FPS: 1.9361988846382387
FPS: 2.084118375240229
FPS: 2.1276071838720196
FPS: 2.150845592876431
FPS: 2.166815053408051
FPS: 2.1721254938356007
FPS: 2.150953340098632
FPS: 2.132549179759591
FPS: 2.129219260448938
FPS: 2.099168058496447
FPS: 2.0809712566505496
FPS: 2.0608992283124823
FPS: 2.0494099084196438
FPS: 2.0331578718968393
FPS: 2.0423375592827804
FPS: 2.051472718175537
FPS: 2.058738344355724
FPS: 2.06505039391321
FPS: 2.07037469985237
FPS: 2.0598345271606378
FPS: 2.049798549525305
FPS: 2.0537131279302905
FPS: 2.057605256385541
FPS: 2.0478990605307894
FPS: 2.0396902593896993
FPS: 2.044537065345571
done
datasets/tum/rgbd_dataset_freiburg1_teddy/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.306881
      mean	0.063634
    median	0.056638
       min	0.008999
      rmse	0.073620
       sse	7.680078
       std	0.037023

datasets/tum/rgbd_dataset_freiburg1_xyz/
APE w.r.t. translation part (m)
(with Sim(3) Umeyama alignment)

       max	0.040877
      mean	0.011939
    median	0.009948
       min	0.000717
      rmse	0.013977
       sse	0.155505
       std	0.007268

